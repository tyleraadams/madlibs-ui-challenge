const React = require('react');
// We're going to use this open source forms library to create our
// madlib form
const t = require('tcomb-form');
const { Form } = t.form;

// PULL OUT INTO UTIL
function findByAttr(array, attr) {
  for(let i = 0; i < array.length; i += 1) {
    if(array[i][attr]) {
        return i;
    }
  }
  return -1;
}

const MadlibForm = React.createClass({
  // this is the function that renders the form. most of the HTML
  // is generated by the forms library, so you're pretty much stuck to
  // how they format it.
  getDefaultProps: function() {
    return {
      requireError: 'oops, you missed this one',
      endingWithLyError: 'this one has to end with "ly"'
    };
  },
  render: function() {
    return (
      <div className='madlib-form'>
        <h2>Fill out the form below to create your madlib</h2>
        <form onSubmit={this.onSubmit}>
          <Form
            ref="form"
            onChange={this.onChange}
            value={this.state.value}
            type={this.state.type}
            options={this.state.options}
          />
          {

            Object.keys(this.state.value).filter(key => this.state.value[key]).length === Object.keys(this.state.inputs).length
            ? (
                <button
                  className="submit-button"
                  type="submit"
                >
                  Make your mad lib!
                </button>
              )
            : null
          }
        </form>
      </div>
    );
  },
  // you probably shouldn't have to touch any of the other functions
  // on this class
  getInitialState: function() {
    this.allInputs = [];
    let result;

    t.String.getValidationErrorMessage = (value, path) => {
      if (!value) {
        return this.props.requireError;
      }
      if (path[0] === 'wordEndingWithLy' && !value.endsWith('ly')) {
        return this.props.endingWithLyError;
      }
    }

    const blankRegexp = /%&(.*?)&%/gi;
    while (result = blankRegexp.exec(this.props.text)) {
      let fieldType;
      if (result[1] === 'wordEndingWithLy') {
        fieldType = t.refinement(t.String, s => s.endsWith('ly'));
      } else if (result[1] === 'number') {
        fieldType = t.Number;
      } else {
        fieldType = t.String;
      }
       this.allInputs.push({[result[1]]: fieldType});
    }
    // only provide the first input for now
    const inputs = this.allInputs[0];

    return {
      type: t.struct(inputs),
      options: {
        fields: {
          number: {
            type: 'number'
          }/*,
          we can disable fields this way
          verb: {
            disabled: {'$set': true}
          }*/
        }
      },
      value: {},
      submitted: false,
      inputs: inputs
    };
  },

  componentDidMount: function() {
    // looking into using ref for this and removing jquery dep
    window.$('.madlib-form input').focus(e => {
      window.$('.has-focus').removeClass('has-focus');
      window.$(e.target).parent().addClass('has-focus');
    })
  },

  onSubmit: function(event) {
    event.preventDefault();
    if (this.formsAreValid()) {
      this.props.onSubmit(this.getFormValues());
    }
  },
  onChange: function(value, path) {
    this.setState(
      { value: value },
      () => {
        const isValid = this.refs.form.getComponent(path).validate().isValid();
        const inputs = this.allInputs.reduce((acc, curr, currIndex) => {
          // figure out if the input should be added
          const foundIndex = findByAttr(this.allInputs, path);
          if (currIndex <= foundIndex + 1) {
            const currProp = Object.keys(curr)[0];
            acc[currProp] = curr[currProp]
          }
          return acc;
        }, {});
        if (isValid) {
          this.setState({ type: t.struct(inputs), inputs: inputs })
        }
      }
    );
  },
  formsAreValid: function() {
    return !this.refs.form.validate().errors.length;
  },
  getFormValues: function() {
    return this.refs.form.getValue();
  }
});

module.exports = MadlibForm;
