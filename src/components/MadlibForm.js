var React = require('react');
var ReactDOM = require('react-dom');

var findByAttr = require('../utils/find-by-attr');
// We're going to use this open source forms library to create our
// madlib form
var t = require('tcomb-form');
var { Form } = t.form;

var MadlibForm = React.createClass({
  handleBlur: function(e) {
    var activeProp = null;
    var foundIndex = findByAttr(this.allInputs, e.currentTarget.name);
    var inputs = this.allInputs.reduce((acc, curr, currIndex) => {
      // figure out if the input should be added
      if (currIndex <= foundIndex + 1) {
        var currProp = Object.keys(curr)[0];
        acc[currProp] = curr[currProp];
        activeProp = currProp;
      }
      return acc;
    }, {});
    var isValid = this.refs.form
      .getComponent(e.currentTarget.name)
      .validate()
      .isValid();
    if (isValid) {
      // debugger;
      this.setState(
        { type: t.struct(inputs), inputs: inputs, activeProp: activeProp },
        () => {
          var prevPath = Object.keys(this.allInputs[foundIndex])[0];
          var input = ReactDOM.findDOMNode(
            this.refs.form.getComponent(activeProp)
          );
          var prevInput = ReactDOM.findDOMNode(
            this.refs.form.getComponent(prevPath)
          );
          prevInput.classList.remove('has-focus');
          e.currentTarget.setAttribute('disabled', true);
          input.classList.add('has-focus');

          input.querySelector('input').onblur = this.handleBlur;
          input.querySelector('input').focus();
        }
      );
    }
  },

  getDefaultProps: function() {
    return {
      requireError: 'oops, you missed this one',
      endingWithLyError: 'this one has to end with "ly"'
    };
  },
  // this is the function that renders the form. most of the HTML
  // is generated by the forms library, so you're pretty much stuck to
  // how they format it.
  render: function() {
    return (
      <div className="madlib-form">
        <h2 className="madlib-form__title">
          Fill out the form below to create your madlib
        </h2>
        <form className="madlib-form__form" onSubmit={this.onSubmit}>
          <Form
            ref="form"
            onChange={this.onChange}
            value={this.state.value}
            type={this.state.type}
            options={this.state.options}
          />
          {Object.keys(this.state.value).filter(key => this.state.value[key])
            .length === Object.keys(this.allInputs).length ? (
            <button className="submit-button" type="submit">
              Make your mad lib!
            </button>
          ) : null}
        </form>
      </div>
    );
  },
  // you probably shouldn't have to touch any of the other functions
  // on this class
  getInitialState: function() {
    this.allInputs = [];
    var result;

    t.String.getValidationErrorMessage = (value, path) => {
      if (!value) {
        return this.props.requireError;
      }
      if (path[0] === 'wordEndingWithLy' && !value.endsWith('ly')) {
        return this.props.endingWithLyError;
      }
    };

    var blankRegexp = /%&(.*?)&%/gi;
    while ((result = blankRegexp.exec(this.props.text))) {
      var fieldType;
      if (result[1] === 'wordEndingWithLy') {
        fieldType = t.refinement(t.String, s => s.endsWith('ly'));
      } else if (result[1] === 'number') {
        fieldType = t.Number;
      } else {
        fieldType = t.String;
      }
      this.allInputs.push({ [result[1]]: fieldType });
    }
    // only provide the first input for now
    var inputs = this.allInputs[0];

    return {
      type: t.struct(inputs),
      options: {
        fields: {
          number: {
            type: 'number'
          } /*,
          we can disable fields this way
          verb: {
            disabled: {'$set': true}
          }*/
        }
      },
      value: {},
      submitted: false,
      inputs: inputs
    };
  },
  componentDidMount: function() {
    var form = ReactDOM.findDOMNode(this.refs.form);
    var firstInput = form.querySelector('.form-group');
    firstInput.classList.add('has-focus');
    firstInput.querySelector('input').onblur = this.handleBlur;

    setTimeout(() => {
      firstInput.querySelector('input').focus();
    }, 1200);
  },
  onSubmit: function(event) {
    event.preventDefault();
    if (this.formsAreValid()) {
      this.props.onSubmit(this.getFormValues());
    }
  },
  onChange: function(value) {
    this.setState({ value: value });
  },
  formsAreValid: function() {
    return !this.refs.form.validate().errors.length;
  },
  getFormValues: function() {
    return this.refs.form.getValue();
  }
});

module.exports = MadlibForm;
